"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –≤ –∏–≥—Ä–µ Sea of Conquest.
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π.
"""
import sys
import argparse
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
sys.path.insert(0, str(Path(__file__).parent))

from core.logger import setup_logger, safe_log_message
from core.adb_controller import ADBController
from core.image_handler import ImageHandler
from game.game_bot import OptimizedGameBot
from config.settings import validate_config
from utils.validators import validate_server_range, validate_step_number


def open_terminal_if_needed():
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª, –µ—Å–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –Ω–µ –∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç PowerShell –Ω–∞ Windows –≤–º–µ—Å—Ç–æ CMD.
    """
    import os
    import sys
    import platform
    import subprocess
    import shutil

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —É–∂–µ –∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    is_terminal = os.isatty(sys.stdout.fileno()) if hasattr(sys.stdout, 'fileno') else False

    if not is_terminal:
        logger = logging.getLogger('sea_conquest_bot.main')
        logger.info("–û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤")

        system = platform.system()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É
            script_path = os.path.abspath(sys.argv[0])

            if system == 'Windows':
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å pwsh (PowerShell Core) –∏–ª–∏ powershell (Windows PowerShell)
                powershell_exe = 'pwsh.exe' if shutil.which('pwsh.exe') else 'powershell.exe'

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è PowerShell
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º -NoExit, —á—Ç–æ–±—ã –æ–∫–Ω–æ –æ—Å—Ç–∞–≤–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—ã–º –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º -Command –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞—à–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
                command = f'python "{script_path}" {" ".join(sys.argv[1:])}'
                subprocess.Popen([powershell_exe, '-NoExit', '-Command', command],
                                 creationflags=subprocess.CREATE_NEW_CONSOLE)
            elif system == 'Darwin':  # macOS
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º Terminal —Å –∫–æ–º–∞–Ω–¥–æ–π –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
                applescript = (
                    f'tell application "Terminal" to do script "cd {os.path.dirname(script_path)} && '
                    f'python3 {script_path} {" ".join(sys.argv[1:])}"'
                )
                subprocess.Popen(['osascript', '-e', applescript])
            else:  # Linux –∏ –¥—Ä—É–≥–∏–µ Unix-–ø–æ–¥–æ–±–Ω—ã–µ
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω–∞–ª—ã
                terminals = ['gnome-terminal', 'xterm', 'konsole', 'terminator']
                for terminal in terminals:
                    try:
                        subprocess.Popen([terminal, '--', 'python3', script_path] + sys.argv[1:])
                        break
                    except FileNotFoundError:
                        continue

            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å, —Ç–∞–∫ –∫–∞–∫ –Ω–æ–≤—ã–π –∑–∞–ø—É—â–µ–Ω –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
            sys.exit(0)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞: {e}")


def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    parser = argparse.ArgumentParser(
        description='–ë–æ—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –≤ –∏–≥—Ä–µ Sea of Conquest',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python main.py                              # –ó–∞–ø—É—Å–∫ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –≤–≤–æ–¥–æ–º
  python main.py -c 5 -v                      # 5 —Ü–∏–∫–ª–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  python main.py --test-server 505            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ 505
  python main.py --test-skip                  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ –ü–†–û–ü–£–°–¢–ò–¢–¨
  python main.py --info                       # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —ç–∫—Ä–∞–Ω–µ
        """
    )

    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    main_group = parser.add_argument_group('–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã')
    main_group.add_argument(
        '-c', '--cycles',
        type=int,
        default=1,
        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –æ–±—É—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)'
    )

    main_group.add_argument(
        '-v', '--verbose',
        action='store_true',
        help='–í–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è'
    )

    main_group.add_argument(
        '--use-emoji',
        action='store_true',
        help='–í–∫–ª—é—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –≤ —Ñ–∞–π–ª–æ–≤—ã—Ö –ª–æ–≥–∞—Ö (–º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞ Windows)'
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    connection_group = parser.add_argument_group('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
    connection_group.add_argument(
        '-d', '--device',
        type=str,
        default=None,
        help='–ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ADB (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ)'
    )

    connection_group.add_argument(
        '-H', '--host',
        type=str,
        default='127.0.0.1',
        help='–•–æ—Å—Ç ADB —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 127.0.0.1)'
    )

    connection_group.add_argument(
        '-p', '--port',
        type=int,
        default=5037,
        help='–ü–æ—Ä—Ç ADB —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5037)'
    )

    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã
    test_group = parser.add_argument_group('–†–µ–∂–∏–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    test_group.add_argument(
        '--test-server',
        type=int,
        help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ (–±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è)'
    )

    test_group.add_argument(
        '--test-skip',
        action='store_true',
        help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ –ü–†–û–ü–£–°–¢–ò–¢–¨'
    )

    test_group.add_argument(
        '--test-step',
        type=int,
        help='–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
    )

    test_group.add_argument(
        '--info',
        action='store_true',
        help='–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —ç–∫—Ä–∞–Ω–µ'
    )

    return parser.parse_args()


def check_environment():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞.

    Returns:
        bool: True –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
    """
    logger = logging.getLogger('sea_conquest_bot.main')

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    logger.info(safe_log_message("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    try:
        if not validate_config():
            logger.error(safe_log_message("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏",
                                        "–û–®–ò–ë–ö–ê: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏"))
            return False
        logger.info(safe_log_message("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é",
                                   "–û–ö: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é"))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", exc_info=True)
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è ADB
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è ADB...")
    try:
        import subprocess
        result = subprocess.run(['adb', 'version'], capture_output=True, text=True)
        if result.returncode != 0:
            logger.error(safe_log_message("‚ùå ADB –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                                        "–û–®–ò–ë–ö–ê: ADB –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"))
            return False
        version_line = result.stdout.splitlines()[0]
        logger.info(safe_log_message(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω ADB: {version_line}",
                                   f"–û–ö: –û–±–Ω–∞—Ä—É–∂–µ–Ω ADB: {version_line}"))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ADB: {e}")
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    try:
        import cv2
        import numpy
        logger.info(safe_log_message("‚úÖ OpenCV –∏ NumPy –¥–æ—Å—Ç—É–ø–Ω—ã",
                                   "–û–ö: OpenCV –∏ NumPy –¥–æ—Å—Ç—É–ø–Ω—ã"))
    except ImportError as e:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞: {e}")
        logger.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Tesseract OCR (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    try:
        import pytesseract
        logger.info(safe_log_message("‚úÖ OCR (Tesseract) –¥–æ—Å—Ç—É–ø–µ–Ω",
                                   "–û–ö: OCR (Tesseract) –¥–æ—Å—Ç—É–ø–µ–Ω"))
    except ImportError:
        logger.warning(safe_log_message("‚ö†Ô∏è OCR (Tesseract) –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ",
                                      "–í–ù–ò–ú–ê–ù–ò–ï: OCR (Tesseract) –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ"))

    logger.info(safe_log_message("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ",
                               "–û–ö: –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"))
    return True


def run_test_mode(args, game_bot):
    """
    –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ–∂–∏–º–æ–≤.

    Args:
        args: –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        game_bot: —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    logger = logging.getLogger('sea_conquest_bot.main')

    if args.test_server:
        logger.info(safe_log_message(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ {args.test_server}",
                                   f"–¢–ï–°–¢: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ {args.test_server}"))
        result = game_bot.test_server_selection(args.test_server)
        status = safe_log_message("‚úÖ –£—Å–ø–µ—Ö", "–£–°–ü–ï–•") if result else safe_log_message("‚ùå –ù–µ—É–¥–∞—á–∞", "–ù–ï–£–î–ê–ß–ê")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {status}")

    if args.test_skip:
        logger.info(safe_log_message("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ –ü–†–û–ü–£–°–¢–ò–¢–¨",
                                   "–¢–ï–°–¢: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ –ü–†–û–ü–£–°–¢–ò–¢–¨"))
        result = game_bot.test_skip_button_search()
        status = safe_log_message("‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞", "–£–°–ü–ï–•: –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞") if result else safe_log_message("‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "–ù–ï–£–î–ê–ß–ê: –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {status}")

    if args.test_step:
        logger.info(safe_log_message(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞ {args.test_step}",
                                   f"–¢–ï–°–¢: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞ {args.test_step}"))
        result = game_bot.execute_single_step(args.test_step)
        status = safe_log_message("‚úÖ –£—Å–ø–µ—Ö", "–£–°–ü–ï–•") if result else safe_log_message("‚ùå –ù–µ—É–¥–∞—á–∞", "–ù–ï–£–î–ê–ß–ê")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {status}")

    if args.info:
        logger.info(safe_log_message("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —ç–∫—Ä–∞–Ω–µ",
                                   "–ò–ù–§–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —ç–∫—Ä–∞–Ω–µ"))
        info = game_bot.get_current_screen_info()
        print("\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫—Ä–∞–Ω–µ:")
        for key, value in info.items():
            print(f"  ‚Ä¢ {key}: {value}")


def get_user_input():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.

    Returns:
        tuple: (start_server, end_server, start_step)
    """
    print("\n" + "="*50)
    print(safe_log_message("üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–æ—Ç–∞ Sea of Conquest",
                          "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–æ—Ç–∞ Sea of Conquest"))
    print("="*50)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
    while True:
        try:
            print(safe_log_message("\nüì° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤:",
                                 "\n–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤:"))
            start_server = int(input("  –ù–∞—á–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 619): ") or "619")
            end_server = int(input("  –ö–æ–Ω–µ—á–Ω—ã–π —Å–µ—Ä–≤–µ—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1): ") or "1")

            if validate_server_range(start_server, end_server):
                break
            else:
                print(safe_log_message("  ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Å–µ—Ä–≤–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                                      "  –û–®–ò–ë–ö–ê: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Å–µ—Ä–≤–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."))
        except ValueError:
            print(safe_log_message("  ‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.",
                                 "  –û–®–ò–ë–ö–ê: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è."))

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —à–∞–≥–∞
    while True:
        try:
            print(safe_log_message("\nüöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —à–∞–≥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞):",
                                 "\n–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —à–∞–≥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞):"))
            start_step = int(input("  –ù–∞—á–∞–ª—å–Ω—ã–π —à–∞–≥ (1-97, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1): ") or "1")

            if validate_step_number(start_step):
                break
            else:
                print(safe_log_message("  ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —à–∞–≥–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 97.",
                                      "  –û–®–ò–ë–ö–ê: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —à–∞–≥–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 97."))
        except ValueError:
            print(safe_log_message("  ‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
                                 "  –û–®–ò–ë–ö–ê: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."))

    print(safe_log_message(f"\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:", f"\n–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:"))
    print(f"  ‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω —Å–µ—Ä–≤–µ—Ä–æ–≤: {start_server} ‚Üí {end_server}")
    print(f"  ‚Ä¢ –ù–∞—á–∞–ª—å–Ω—ã–π —à–∞–≥: {start_step}")

    return start_server, end_server, start_step


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    print(safe_log_message("üåä –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ Sea of Conquest...", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ Sea of Conquest..."))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    open_terminal_if_needed()

    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    args = parse_arguments()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_level = logging.DEBUG if args.verbose else logging.INFO
    logger = setup_logger(log_level=log_level, use_emoji_in_file=args.use_emoji)
    logger.info(safe_log_message("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –≤ –∏–≥—Ä–µ Sea of Conquest",
                               "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –≤ –∏–≥—Ä–µ Sea of Conquest"))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not check_environment():
        logger.error("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞. –í—ã—Ö–æ–¥.")
        sys.exit(1)

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        logger.info(safe_log_message("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...",
                                   "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤..."))

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ ADB
        adb_controller = ADBController(
            host=args.host,
            port=args.port,
            device_name=args.device
        )

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_handler = ImageHandler(adb_controller)

        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
        game_bot = OptimizedGameBot(adb_controller, image_handler)
        logger.info(safe_log_message("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ",
                                   "–û–ö: –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ"))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã
        if any([args.test_server, args.test_skip, args.test_step, args.info]):
            run_test_mode(args, game_bot)
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        start_server, end_server, start_step = get_user_input()

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
        server_count = start_server - end_server + 1
        cycles_to_run = min(args.cycles, server_count)

        print(safe_log_message(f"\nüéØ –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É:", f"\n–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É:"))
        print(f"  ‚Ä¢ –¶–∏–∫–ª–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {cycles_to_run}")
        print(f"  ‚Ä¢ –°–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {server_count}")

        confirm = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").lower().strip()
        if confirm not in ['y', 'yes', '–¥–∞']:
            print(safe_log_message("‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
                                  "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"))
            return

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info(safe_log_message(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ {cycles_to_run} —Ü–∏–∫–ª–æ–≤ (—Å–µ—Ä–≤–µ—Ä–∞ {start_server}‚Üí{end_server})",
                                   f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ {cycles_to_run} —Ü–∏–∫–ª–æ–≤ (—Å–µ—Ä–≤–µ—Ä–∞ {start_server}‚Üí{end_server})"))
        logger.info(f"–ù–∞—á–∞–ª—å–Ω—ã–π —à–∞–≥ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: {start_step}")

        successful_cycles = game_bot.run_bot(
            cycles=args.cycles,
            start_server=start_server,
            end_server=end_server,
            first_server_start_step=start_step
        )

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        print(safe_log_message(f"\nüèÅ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", f"\n–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"))
        print(f"  ‚Ä¢ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {successful_cycles} –∏–∑ {cycles_to_run} —Ü–∏–∫–ª–æ–≤")

        if successful_cycles < cycles_to_run:
            print(f"  ‚Ä¢ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {cycles_to_run - successful_cycles} —Ü–∏–∫–ª–æ–≤")

        logger.info(f"–ò—Ç–æ–≥–∏: {successful_cycles}/{cycles_to_run} —Ü–∏–∫–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

    except KeyboardInterrupt:
        logger.info(safe_log_message("‚èπÔ∏è –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)",
                                   "–†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)"))
        print(safe_log_message("\n‚èπÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
                              "\n–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"))
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}", exc_info=True)
        print(f"\n–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        logger.info(safe_log_message("üèÅ –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "–†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"))
        print(safe_log_message("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!", "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"))


if __name__ == "__main__":
    main()