"""
–ú–æ–¥—É–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Unicode.
"""
import logging
import os
import sys
from datetime import datetime
from pathlib import Path


class UnicodeFormatter(logging.Formatter):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Unicode —Å–∏–º–≤–æ–ª—ã."""

    def __init__(self, fmt=None, datefmt=None, use_emoji=True):
        super().__init__(fmt, datefmt)
        self.use_emoji = use_emoji

        # –°–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω —ç–º–æ–¥–∑–∏ –Ω–∞ —Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ª–æ–≥–∞
        self.emoji_replacements = {
            'üöÄ': '[START]',
            'üîç': '[CHECK]',
            '‚úÖ': '[OK]',
            '‚ùå': '[ERROR]',
            '‚ö†Ô∏è': '[WARNING]',
            'üîß': '[INIT]',
            'üì°': '[NETWORK]',
            'üéÆ': '[GAME]',
            'üìä': '[INFO]',
            'üí•': '[CRITICAL]',
            '‚èπÔ∏è': '[STOP]',
            'üèÅ': '[FINISH]',
            'üëã': '[BYE]',
            'üß™': '[TEST]',
            'üìã': '[LIST]',
            'üéØ': '[TARGET]',
            'üåä': '[MAIN]',
        }

    def format(self, record):
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        formatted = super().format(record)

        # –ï—Å–ª–∏ —ç–º–æ–¥–∑–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã, –∑–∞–º–µ–Ω—è–µ–º –∏—Ö –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∞–Ω–∞–ª–æ–≥–∏
        if not self.use_emoji:
            for emoji, replacement in self.emoji_replacements.items():
                formatted = formatted.replace(emoji, replacement)

        return formatted


def setup_logger(log_dir='logs', log_level=logging.INFO, use_emoji_in_file=False):
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Unicode.

    Args:
        log_dir: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤
        log_level: —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        use_emoji_in_file: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —ç–º–æ–¥–∑–∏ –≤ —Ñ–∞–π–ª–æ–≤–æ–º –ª–æ–≥–µ

    Returns:
        logging.Logger: –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    """
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    log_path = Path(log_dir)
    log_path.mkdir(exist_ok=True)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    log_filename = log_path / f'sea_conquest_bot_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log'

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ (—Å —ç–º–æ–¥–∑–∏)
    console_formatter = UnicodeFormatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        use_emoji=True
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ñ–∞–π–ª–∞ (–±–µ–∑ —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ)
    file_formatter = UnicodeFormatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        use_emoji=use_emoji_in_file
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏ UTF-8
    file_handler = logging.FileHandler(log_filename, encoding='utf-8')
    file_handler.setLevel(log_level)
    file_handler.setFormatter(file_formatter)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(log_level)
    console_handler.setFormatter(console_formatter)

    # –î–ª—è Windows –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ UTF-8
    if sys.platform.startswith('win'):
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å UTF-8 –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
            sys.stdout.reconfigure(encoding='utf-8')
            sys.stderr.reconfigure(encoding='utf-8')
        except (AttributeError, OSError):
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ —Ç–æ–∂–µ
            console_formatter = UnicodeFormatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                use_emoji=False
            )
            console_handler.setFormatter(console_formatter)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    logger = logging.getLogger('sea_conquest_bot')
    logger.setLevel(log_level)

    # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    logger.handlers = []

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫ –ª–æ–≥–≥–µ—Ä—É
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)

    # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤ –≤ –∫–æ—Ä–Ω–µ–≤–æ–º –ª–æ–≥–≥–µ—Ä–µ
    logger.propagate = False

    # –õ–æ–≥–∏—Ä—É–µ–º –±–µ–∑ —ç–º–æ–¥–∑–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    logger.info(f"–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –£—Ä–æ–≤–µ–Ω—å: {logging.getLevelName(log_level)}")
    logger.info(f"–õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤: {log_filename}")
    logger.info(f"–ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –ª–æ–≥–∞: UTF-8")

    if use_emoji_in_file:
        logger.info("–≠–º–æ–¥–∑–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ —Ñ–∞–π–ª–æ–≤–æ–º –ª–æ–≥–µ")
    else:
        logger.info("–≠–º–æ–¥–∑–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ —Ñ–∞–π–ª–æ–≤–æ–º –ª–æ–≥–µ")

    return logger


def get_safe_logger(name):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π.

    Args:
        name: –∏–º—è –ª–æ–≥–≥–µ—Ä–∞

    Returns:
        logging.Logger: –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    """
    return logging.getLogger(f'sea_conquest_bot.{name}')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —ç–º–æ–¥–∑–∏
def safe_log_message(message, fallback_message=None):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–∞.

    Args:
        message: —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏
        fallback_message: –∑–∞–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —ç–º–æ–¥–∑–∏

    Returns:
        str: –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ UTF-8
        message.encode('utf-8')
        return message
    except UnicodeEncodeError:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏
        if fallback_message:
            return fallback_message
        else:
            # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —ç–º–æ–¥–∑–∏
            emoji_map = {
                'üöÄ': '[START]',
                'üîç': '[CHECK]',
                '‚úÖ': '[OK]',
                '‚ùå': '[ERROR]',
                '‚ö†Ô∏è': '[WARNING]',
                'üîß': '[INIT]',
            }
            safe_message = message
            for emoji, replacement in emoji_map.items():
                safe_message = safe_message.replace(emoji, replacement)
            return safe_message