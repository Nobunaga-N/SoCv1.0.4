"""
–ú–æ–¥—É–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Unicode –∏ —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞.
"""
import logging
import os
import sys
import platform
from datetime import datetime
from pathlib import Path


class ColoredFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ü–≤–µ—Ç–æ–≤ –∏ Unicode —Å–∏–º–≤–æ–ª–æ–≤."""

    # ANSI –∫–æ–¥—ã —Ü–≤–µ—Ç–æ–≤
    COLORS = {
        'RESET': '\033[0m',
        'BLACK': '\033[30m',
        'RED': '\033[31m',
        'GREEN': '\033[32m',
        'YELLOW': '\033[33m',
        'BLUE': '\033[34m',
        'MAGENTA': '\033[35m',
        'CYAN': '\033[36m',
        'WHITE': '\033[37m',
        'BOLD': '\033[1m',
        'UNDERLINE': '\033[4m',
        'BACKGROUND_RED': '\033[41m',
        'BACKGROUND_GREEN': '\033[42m',
        'BACKGROUND_YELLOW': '\033[43m',
    }

    # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–æ–≤ —Ü–≤–µ—Ç–∞–º
    LEVEL_COLORS = {
        logging.DEBUG: COLORS['BLUE'],
        logging.INFO: COLORS['WHITE'],
        logging.WARNING: COLORS['YELLOW'],
        logging.ERROR: COLORS['RED'],
        logging.CRITICAL: COLORS['BACKGROUND_RED'] + COLORS['WHITE'] + COLORS['BOLD'],
    }

    # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    LEVEL_EMOJI = {
        logging.DEBUG: 'üîç',
        logging.INFO: '‚ÑπÔ∏è',
        logging.WARNING: '‚ö†Ô∏è',
        logging.ERROR: '‚ùå',
        logging.CRITICAL: 'üí•',
    }

    # –°–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω —ç–º–æ–¥–∑–∏ –Ω–∞ —Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ª–æ–≥–∞
    EMOJI_REPLACEMENTS = {
        'üöÄ': '[START]',
        'üîç': '[DEBUG]',
        '‚ÑπÔ∏è': '[INFO]',
        '‚úÖ': '[SUCCESS]',
        '‚ùå': '[ERROR]',
        '‚ö†Ô∏è': '[WARNING]',
        'üîß': '[INIT]',
        'üì°': '[NETWORK]',
        'üéÆ': '[GAME]',
        'üìä': '[STATS]',
        'üí•': '[CRITICAL]',
        '‚èπÔ∏è': '[STOP]',
        'üèÅ': '[FINISH]',
        'üëã': '[BYE]',
        'üß™': '[TEST]',
        'üìã': '[LIST]',
        'üéØ': '[TARGET]',
        'üåä': '[MAIN]',
        'üîÑ': '[RETRY]',
        '‚öôÔ∏è': '[CONFIG]',
        'üìå': '[STEP]',
        'üî∂': '[SECTION]',
    }

    def __init__(self, fmt=None, datefmt=None, use_colors=True, use_emoji=True):
        super().__init__(fmt, datefmt)
        self.use_colors = use_colors
        self.use_emoji = use_emoji

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª —Ü–≤–µ—Ç–∞
        if self.use_colors and platform.system() == 'Windows':
            # –ù–∞ Windows –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ–¥–¥–µ—Ä–∂–∫—É ANSI —Ü–≤–µ—Ç–æ–≤
            try:
                import colorama
                colorama.init()
            except ImportError:
                # –ï—Å–ª–∏ colorama –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –æ—Ç–∫–ª—é—á–∞–µ–º —Ü–≤–µ—Ç–∞
                self.use_colors = False

    def format(self, record):
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        formatted = super().format(record)

        # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —Ü–≤–µ—Ç–∞ –∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ü–≤–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if self.use_colors and record.levelno in self.LEVEL_COLORS:
            color_start = self.LEVEL_COLORS[record.levelno]
            color_end = self.COLORS['RESET']
            formatted = f"{color_start}{formatted}{color_end}"

        # –ï—Å–ª–∏ —ç–º–æ–¥–∑–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã, –∑–∞–º–µ–Ω—è–µ–º –∏—Ö –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∞–Ω–∞–ª–æ–≥–∏
        if not self.use_emoji:
            for emoji, replacement in self.EMOJI_REPLACEMENTS.items():
                formatted = formatted.replace(emoji, replacement)

        return formatted

    def formatMessage(self, record):
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –≤–∫–ª—é—á–µ–Ω—ã
        if self.use_emoji and record.levelno in self.LEVEL_EMOJI:
            level_emoji = self.LEVEL_EMOJI[record.levelno]
            record.message = f"{level_emoji} {record.message}"
        return super().formatMessage(record)


class StepHandler(logging.Handler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –º–µ–∂–¥—É —à–∞–≥–∞–º–∏."""

    def __init__(self, formatter=None):
        super().__init__()
        if formatter:
            self.setFormatter(formatter)
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —à–∞–≥–∞
        self.last_step = None

    def emit(self, record):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∑–∞–ø–∏—Å—å –Ω–æ–º–µ—Ä —à–∞–≥–∞
        try:
            if "–í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥" in record.msg:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —à–∞–≥–∞ —Å –ø–æ–º–æ—â—å—é —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
                parts = record.msg.split("–í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥ ")
                if len(parts) > 1:
                    step_part = parts[1].split(":", 1)[0].strip()
                    try:
                        step_num = int(step_part)
                        if step_num != self.last_step:
                            # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —à–∞–≥–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è, –≤—ã–≤–æ–¥–∏–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                            self.last_step = step_num
                            divider = f"\n{'='*50}\nüìå –®–ê–ì {step_num}\n{'='*50}\n"

                            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä, –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω
                            if self.formatter:
                                if hasattr(self.formatter, 'use_colors') and self.formatter.use_colors:
                                    divider = f"{ColoredFormatter.COLORS['CYAN']}{divider}{ColoredFormatter.COLORS['RESET']}"

                            # –í—ã–≤–æ–¥–∏–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ –∫–æ–Ω—Å–æ–ª—å
                            sys.stdout.write(divider)
                            sys.stdout.flush()
                    except ValueError:
                        pass
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
            pass


def setup_logger(log_dir='logs', log_level=logging.INFO, use_emoji_in_file=False, use_colors=True):
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Unicode –∏ —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞.

    Args:
        log_dir: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤
        log_level: —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        use_emoji_in_file: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —ç–º–æ–¥–∑–∏ –≤ —Ñ–∞–π–ª–æ–≤–æ–º –ª–æ–≥–µ
        use_colors: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —Ü–≤–µ—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏

    Returns:
        logging.Logger: –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    """
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    log_path = Path(log_dir)
    log_path.mkdir(exist_ok=True)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    log_filename = log_path / f'sea_conquest_bot_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log'

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ (—Å —Ü–≤–µ—Ç–∞–º–∏ –∏ —ç–º–æ–¥–∑–∏)
    console_formatter = ColoredFormatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        use_colors=use_colors,
        use_emoji=True
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ñ–∞–π–ª–∞ (–±–µ–∑ —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ)
    file_formatter = ColoredFormatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        use_colors=False,  # –í —Ñ–∞–π–ª–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç–∞
        use_emoji=use_emoji_in_file
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏ UTF-8
    file_handler = logging.FileHandler(log_filename, encoding='utf-8')
    file_handler.setLevel(log_level)
    file_handler.setFormatter(file_formatter)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(log_level)
    console_handler.setFormatter(console_formatter)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —à–∞–≥–æ–≤
    step_handler = StepHandler(console_formatter)
    step_handler.setLevel(logging.INFO)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è INFO –∏ –≤—ã—à–µ

    # –î–ª—è Windows –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ UTF-8
    if sys.platform.startswith('win'):
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å UTF-8 –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
            sys.stdout.reconfigure(encoding='utf-8')
            sys.stderr.reconfigure(encoding='utf-8')
        except (AttributeError, OSError):
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä —ç–º–æ–¥–∑–∏
            console_formatter = ColoredFormatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                use_colors=use_colors,
                use_emoji=False
            )
            console_handler.setFormatter(console_formatter)
            step_handler.setFormatter(console_formatter)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    logger = logging.getLogger('sea_conquest_bot')
    logger.setLevel(log_level)

    # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    logger.handlers = []

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫ –ª–æ–≥–≥–µ—Ä—É
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    logger.addHandler(step_handler)

    # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤ –≤ –∫–æ—Ä–Ω–µ–≤–æ–º –ª–æ–≥–≥–µ—Ä–µ
    logger.propagate = False

    # –õ–æ–≥–∏—Ä—É–µ–º –±–µ–∑ —ç–º–æ–¥–∑–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    logger.info(f"–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –£—Ä–æ–≤–µ–Ω—å: {logging.getLevelName(log_level)}")
    logger.info(f"–õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤: {log_filename}")
    logger.info(f"–ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –ª–æ–≥–∞: UTF-8")
    logger.info(f"–¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏: {'–í–∫–ª—é—á–µ–Ω' if use_colors else '–û—Ç–∫–ª—é—á–µ–Ω'}")

    if use_emoji_in_file:
        logger.info("–≠–º–æ–¥–∑–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ —Ñ–∞–π–ª–æ–≤–æ–º –ª–æ–≥–µ")
    else:
        logger.info("–≠–º–æ–¥–∑–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ —Ñ–∞–π–ª–æ–≤–æ–º –ª–æ–≥–µ")

    # –í—ã–≤–æ–¥–∏–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    logger.info("\n" + "="*50)
    logger.info("üöÄ –ë–û–¢ SEA OF CONQUEST –ó–ê–ü–£–©–ï–ù")
    logger.info("="*50 + "\n")

    return logger


def get_safe_logger(name):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π.

    Args:
        name: –∏–º—è –ª–æ–≥–≥–µ—Ä–∞

    Returns:
        logging.Logger: –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    """
    return logging.getLogger(f'sea_conquest_bot.{name}')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —ç–º–æ–¥–∑–∏
def safe_log_message(message, fallback_message=None):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–∞.

    Args:
        message: —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏
        fallback_message: –∑–∞–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —ç–º–æ–¥–∑–∏

    Returns:
        str: –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ UTF-8
        message.encode('utf-8')
        return message
    except UnicodeEncodeError:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏
        if fallback_message:
            return fallback_message
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω –∏–∑ ColoredFormatter
            emoji_map = ColoredFormatter.EMOJI_REPLACEMENTS
            safe_message = message
            for emoji, replacement in emoji_map.items():
                safe_message = safe_message.replace(emoji, replacement)
            return safe_message


# –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ü–≤–µ—Ç–∞–º–∏
def log_success(logger, message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è (–∑–µ–ª–µ–Ω—ã–º —Ü–≤–µ—Ç–æ–º)."""
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ ‚úÖ –≤ –Ω–∞—á–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    logger.info(f"‚úÖ {message}")


def log_failure(logger, message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è (–∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º)."""
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ ‚ùå –≤ –Ω–∞—á–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    logger.error(f"‚ùå {message}")


def log_step(logger, step_number, message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —à–∞–≥–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º."""
    logger.info(f"–í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥ {step_number}: {message}")


def log_section(logger, title):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–¥–µ–ª–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ üî∂ –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞
    divider = f"\n{'-'*50}\nüî∂ {title}\n{'-'*50}"
    logger.info(divider)