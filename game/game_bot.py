"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥—É–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.
"""
import logging
import time
from typing import Optional

from core.adb_controller import ADBController
from core.image_handler import ImageHandler
from ui.interface_controller import InterfaceController
from ui.ocr_handler import OCRHandler
from ui.server_selector import OptimizedServerSelector
from tutorial.tutorial_executor import TutorialExecutor
from config.settings import DEFAULT_TIMEOUT, GAME_PACKAGE, GAME_ACTIVITY


class OptimizedGameBot:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –≤ –∏–≥—Ä–µ Sea of Conquest.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–ª—è –ª—É—á—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Ä–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç–∏.
    """

    def __init__(self, adb_controller: ADBController, image_handler: ImageHandler):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞.

        Args:
            adb_controller: –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä ADB
            image_handler: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        """
        self.logger = logging.getLogger('sea_conquest_bot.main')
        self.adb = adb_controller
        self.image = image_handler

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞...")

        # –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.interface = InterfaceController(adb_controller, image_handler)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ OCR
        self.ocr = OCRHandler(adb_controller)

        # –°–µ–ª–µ–∫—Ç–æ—Ä —Å–µ—Ä–≤–µ—Ä–æ–≤
        self.server_selector = OptimizedServerSelector(adb_controller, self.ocr.ocr_available)

        # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ–±—É—á–µ–Ω–∏—è
        self.tutorial_executor = TutorialExecutor(
            self.interface,
            self.ocr,
            self.server_selector
        )

        self.logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")

    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π

    def start_game(self) -> None:
        """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã."""
        self.logger.info("üéÆ –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã...")
        self.interface.start_app()

    def stop_game(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä—ã."""
        self.logger.info("‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä—ã...")
        self.interface.stop_app()

    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è

    def perform_tutorial(self, server_id: int, start_step: int = 1) -> bool:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.

        Args:
            server_id: –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞
            start_step: –Ω–∞—á–∞–ª—å–Ω—ã–π —à–∞–≥

        Returns:
            bool: —É—Å–ø–µ—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        self.logger.info(f"üìö –ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {server_id} —Å —à–∞–≥–∞ {start_step}")
        return self.tutorial_executor.execute_tutorial(server_id, start_step)

    def run_bot(self, cycles: int = 1, start_server: int = 619,
                end_server: int = 1, first_server_start_step: int = 1) -> int:
        """
        –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–æ–≤ –æ–±—É—á–µ–Ω–∏—è.

        Args:
            cycles: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ (–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –≤—Å–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤)
            start_server: –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
            end_server: –∫–æ–Ω–µ—á–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
            first_server_start_step: –Ω–∞—á–∞–ª—å–Ω—ã–π —à–∞–≥ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞

        Returns:
            int: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤
        """
        self.logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞: {cycles} —Ü–∏–∫–ª–æ–≤, —Å–µ—Ä–≤–µ—Ä–∞ {start_server}-{end_server}")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if start_server < end_server:
            self.logger.error("‚ùå –ù–∞—á–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ")
            return 0

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é
        successful_cycles = 0
        servers_in_range = start_server - end_server + 1
        total_servers_to_process = servers_in_range * cycles

        self.logger.info(f"üìã –í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ: {servers_in_range}")
        self.logger.info(f"üìã –í—Å–µ–≥–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_servers_to_process} —Å–µ—Ä–≤–µ—Ä–æ–≤")

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        total_count = 0
        for cycle in range(1, cycles + 1):
            current_server = start_server  # –ù–∞—á–∏–Ω–∞–µ–º —Å –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤ –∫–∞–∂–¥–æ–º —Ü–∏–∫–ª–µ

            self.logger.info(f"üîÑ –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ {cycle}/{cycles}")

            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å–µ—Ä–≤–µ—Ä–∞–º –≤ —Ç–µ–∫—É—â–µ–º —Ü–∏–∫–ª–µ
            while current_server >= end_server:
                total_count += 1
                cycle_start_time = time.time()
                self.logger.info(
                    f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ {total_count}/{total_servers_to_process}, —Å–µ—Ä–≤–µ—Ä {current_server}, —Ü–∏–∫–ª {cycle}/{cycles}")

                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —à–∞–≥ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –ø–µ—Ä–≤–æ–º —Ü–∏–∫–ª–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º custom —à–∞–≥)
                    current_step = first_server_start_step if (cycle == 1 and current_server == start_server) else 1

                    self.logger.info(f"üìç –ù–∞—á–∞–ª—å–Ω—ã–π —à–∞–≥: {current_step}")

                    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—É—á–µ–Ω–∏–µ
                    if self.perform_tutorial(current_server, start_step=current_step):
                        successful_cycles += 1
                        cycle_time = time.time() - cycle_start_time
                        self.logger.info(f"‚úÖ –°–µ—Ä–≤–µ—Ä {current_server} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ {cycle_time:.1f}—Å")
                    else:
                        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {current_server}")

                    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–µ—Ä–≤–µ—Ä—É
                    current_server -= 1

                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                    if current_server >= end_server:
                        self.logger.info(f"‚è≥ –ü–∞—É–∑–∞ {DEFAULT_TIMEOUT * 2}—Å –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–∞–º–∏...")
                        time.sleep(DEFAULT_TIMEOUT * 2)

                except Exception as e:
                    self.logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {current_server}: {e}", exc_info=True)
                    current_server -= 1  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–µ—Ä–≤–µ—Ä—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
            if cycle < cycles:
                self.logger.info(f"‚è≥ –ü–∞—É–∑–∞ {DEFAULT_TIMEOUT * 4}—Å –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏...")
                time.sleep(DEFAULT_TIMEOUT * 4)

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        success_rate = (successful_cycles / total_servers_to_process) * 100 if total_servers_to_process > 0 else 0
        self.logger.info(f"üìä –ò—Ç–æ–≥: {successful_cycles}/{total_servers_to_process} —Å–µ—Ä–≤–µ—Ä–æ–≤ ({success_rate:.1f}%)")

        return successful_cycles

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ª–∞–¥–∫–∏

    def test_server_selection(self, server_id: int) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞.

        Args:
            server_id: –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        Returns:
            bool: —É—Å–ø–µ—Ö –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
        """
        self.logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ {server_id}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∑–æ–Ω –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
        season_id = self.tutorial_executor._determine_season_for_server(server_id)
        if not season_id:
            self.logger.error(f"‚ùå –°–µ–∑–æ–Ω –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {server_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

        self.logger.info(f"üì° –°–µ—Ä–≤–µ—Ä {server_id} –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Å–µ–∑–æ–Ω—É {season_id}")

        # –í—ã–±–∏—Ä–∞–µ–º —Å–µ–∑–æ–Ω
        if not self.server_selector.select_season(season_id):
            self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Å–µ–∑–æ–Ω {season_id}")
            return False

        # –ò—â–µ–º —Å–µ—Ä–≤–µ—Ä
        coords = self.server_selector.find_server_coordinates(server_id)
        if coords:
            self.logger.info(f"‚úÖ –°–µ—Ä–≤–µ—Ä {server_id} –Ω–∞–π–¥–µ–Ω –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö {coords}")
            return True
        else:
            self.logger.warning(f"‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä {server_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –±–µ–∑ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞")

            # –ü–æ–ø—Ä–æ–±—É–µ–º —Å –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –ø–æ–∏—Å–∫–æ–º
            self.logger.info("üîç –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ —Å–æ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–æ–º...")
            return self.tutorial_executor._find_and_click_server(server_id)

    def test_skip_button_search(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ –ü–†–û–ü–£–°–¢–ò–¢–¨.

        Returns:
            bool: —É—Å–ø–µ—Ö –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏
        """
        self.logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ –ü–†–û–ü–£–°–¢–ò–¢–¨")
        return self.tutorial_executor.skip_finder.find_skip_button_with_timeout(timeout=10)

    def test_ocr_capability(self) -> str:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π OCR.

        Returns:
            str: —Å—Ç–∞—Ç—É—Å OCR
        """
        if self.ocr.ocr_available:
            self.logger.info("‚úÖ OCR –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
            return "OCR –¥–æ—Å—Ç—É–ø–µ–Ω"
        else:
            self.logger.warning("‚ö†Ô∏è  OCR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return "OCR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

    def execute_single_step(self, step_number: int, server_id: int = None) -> bool:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.

        Args:
            step_number: –Ω–æ–º–µ—Ä —à–∞–≥–∞
            server_id: –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞ (–¥–ª—è —à–∞–≥–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞)

        Returns:
            bool: —É—Å–ø–µ—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞
        """
        step = self.tutorial_executor.tutorial_steps.get_step_by_number(step_number)
        if not step:
            self.logger.error(f"‚ùå –®–∞–≥ {step_number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

        self.logger.info(f"üß™ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞ {step_number}: {step.description}")
        return self.tutorial_executor._execute_step(step, server_id)

    def get_current_screen_info(self) -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —ç–∫—Ä–∞–Ω–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.

        Returns:
            dict: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫—Ä–∞–Ω–µ
        """
        self.logger.info("üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞...")

        info = {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "screenshot_available": False,
            "screenshot_shape": None,
            "visible_servers": [],
            "ocr_available": self.ocr.ocr_available,
            "device_connected": True
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        try:
            screenshot = self.adb.screenshot()
            if screenshot is not None and screenshot.size > 0:
                info["screenshot_available"] = True
                info["screenshot_shape"] = screenshot.shape
                self.logger.info(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: {screenshot.shape}")
            else:
                self.logger.warning("‚ö†Ô∏è  –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            info["device_connected"] = False

        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–∏–º—ã–µ —Å–µ—Ä–≤–µ—Ä–∞
        try:
            servers = self.server_selector.get_servers_with_coordinates()
            info["visible_servers"] = list(servers.keys())
            if servers:
                self.logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω–µ: {len(servers)}")
                self.logger.info(f"üìã –ù–æ–º–µ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤: {sorted(servers.keys(), reverse=True)}")
            else:
                self.logger.info("üì≠ –°–µ—Ä–≤–µ—Ä–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        except Exception as e:
            self.logger.debug(f"üîç –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º OCR
        if self.ocr.ocr_available:
            try:
                from config.settings import OCR_REGIONS
                test_region = OCR_REGIONS['skip_button']
                test_text = self.ocr.get_text_from_region(test_region)
                info["ocr_test_result"] = test_text.strip() if test_text else "–¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω"
                self.logger.info(f"üìù OCR —Ç–µ—Å—Ç: {len(test_text)} —Å–∏–º–≤–æ–ª–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ")
            except Exception as e:
                self.logger.debug(f"üìù –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OCR: {e}")
                info["ocr_test_result"] = f"–û—à–∏–±–∫–∞: {e}"

        return info

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    def get_bot_status(self) -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞.

        Returns:
            dict: —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        """
        return {
            "adb_controller": self.adb is not None,
            "image_handler": self.image is not None,
            "interface_controller": self.interface is not None,
            "ocr_handler": self.ocr is not None and self.ocr.ocr_available,
            "server_selector": self.server_selector is not None,
            "tutorial_executor": self.tutorial_executor is not None
        }

    def __str__(self) -> str:
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞."""
        return f"OptimizedGameBot(device={getattr(self.adb, 'device_serial', 'Unknown')})"

    def __repr__(self) -> str:
        """–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞."""
        status = self.get_bot_status()
        active_components = sum(status.values())
        total_components = len(status)
        return f"OptimizedGameBot({active_components}/{total_components} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã)"