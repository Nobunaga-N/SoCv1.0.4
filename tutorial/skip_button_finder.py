"""
–°—É–ø–µ—Ä-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–†–û–ü–£–°–¢–ò–¢–¨ —Å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º.
–°–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –∫–Ω–æ–ø–∫–∏ Sea of Conquest —Å —É—á–µ—Ç–æ–º –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π.
"""
import cv2
import numpy as np
import logging
import time
import os
from typing import Optional, Tuple, List
from pathlib import Path


class UltraFastSkipButtonFinder:
    """–°—É–ø–µ—Ä-–±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫–æ–≤–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–†–û–ü–£–°–¢–ò–¢–¨ —Å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º."""

    def __init__(self, adb_controller, interface_controller, debug_mode=False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—É–ø–µ—Ä-–±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ –ü–†–û–ü–£–°–¢–ò–¢–¨.

        Args:
            adb_controller: –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä ADB
            interface_controller: –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            debug_mode: —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        """
        self.logger = logging.getLogger('sea_conquest_bot.ultra_skip_finder')
        self.adb = adb_controller
        self.interface = interface_controller
        self.debug_mode = debug_mode
        self.ocr_available = self._check_ocr_availability()

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if self.debug_mode:
            self.debug_dir = Path("debug_skip_screenshots")
            self.debug_dir.mkdir(exist_ok=True)

        # –¢–æ—á–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤)
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
        self.primary_region = (1020, 15, 240, 70)  # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
        self.fallback_region = (980, 10, 280, 80)  # –†–µ–∑–µ—Ä–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å

        # –í–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞ (—É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏)
        self.skip_variants = [
            "–ü–†–û–ü–£–°–¢–ò–¢–¨",
            "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
            "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
            ">>",
            "SKIP",
            "Skip"
        ]

        # –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        self.attempt_counter = 0
        self.total_search_time = 0
        self.successful_searches = 0

    def _check_ocr_availability(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ OCR."""
        try:
            import pytesseract
            return True
        except ImportError:
            self.logger.error("OCR –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω - pytesseract –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False

    def find_skip_button_infinite(self) -> bool:
        """
        –°—É–ø–µ—Ä-–±—ã—Å—Ç—Ä—ã–π –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –ü–†–û–ü–£–°–¢–ò–¢–¨.
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.

        Returns:
            bool: True –∫–æ–≥–¥–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ –Ω–∞–∂–∞—Ç–∞
        """
        if not self.ocr_available:
            self.logger.error("OCR –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –ü–†–û–ü–£–°–¢–ò–¢–¨")
            return False

        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å—É–ø–µ—Ä-–±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ –ü–†–û–ü–£–°–¢–ò–¢–¨")

        self.attempt_counter = 0
        start_time = time.time()
        last_log_time = start_time

        while True:
            self.attempt_counter += 1
            attempt_start = time.time()

            try:
                # –°—É–ø–µ—Ä-–±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫
                coords = self._ultra_fast_search()

                if coords:
                    elapsed = time.time() - start_time
                    self.total_search_time += elapsed
                    self.successful_searches += 1
                    avg_time = self.total_search_time / self.successful_searches

                    self.logger.info(
                        f"‚ö° –ü–†–û–ü–£–°–¢–ò–¢–¨ –Ω–∞–π–¥–µ–Ω –∑–∞ {elapsed:.2f}—Å –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {self.attempt_counter} "
                        f"(—Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.2f}—Å)"
                    )
                    self.interface.click_coord(coords[0], coords[1])
                    return True

            except Exception as e:
                self.logger.debug(f"–û—à–∏–±–∫–∞ –≤ –ø–æ–ø—ã—Ç–∫–µ {self.attempt_counter}: {e}")

            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            current_time = time.time()
            if current_time - last_log_time >= 5:
                self.logger.info(f"üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è... –ü–æ–ø—ã—Ç–∫–∞ {self.attempt_counter} (–≤—Ä–µ–º—è: {current_time - start_time:.1f}—Å)")
                last_log_time = current_time

            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            time.sleep(0.05)  # –ï—â–µ –º–µ–Ω—å—à–µ –ø–∞—É–∑—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏

    def find_skip_button_with_timeout(self, timeout: int = 10) -> bool:
        """
        –°—É–ø–µ—Ä-–±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –ü–†–û–ü–£–°–¢–ò–¢–¨ —Å —Ç–∞–π–º–∞—É—Ç–æ–º.

        Args:
            timeout: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        Returns:
            bool: True –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ –Ω–∞–∂–∞—Ç–∞
        """
        if not self.ocr_available:
            return False

        self.logger.info(f"‚ö° –°—É–ø–µ—Ä-–±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ü–†–û–ü–£–°–¢–ò–¢–¨ —Å —Ç–∞–π–º–∞—É—Ç–æ–º {timeout}—Å")

        start_time = time.time()
        self.attempt_counter = 0

        while time.time() - start_time < timeout:
            self.attempt_counter += 1

            try:
                coords = self._ultra_fast_search()

                if coords:
                    elapsed = time.time() - start_time
                    self.logger.info(f"‚ö° –ü–†–û–ü–£–°–¢–ò–¢–¨ –Ω–∞–π–¥–µ–Ω –∑–∞ {elapsed:.2f}—Å –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {self.attempt_counter}")
                    self.interface.click_coord(coords[0], coords[1])
                    return True

            except Exception as e:
                self.logger.debug(f"–û—à–∏–±–∫–∞ –≤ –ø–æ–ø—ã—Ç–∫–µ {self.attempt_counter}: {e}")

            time.sleep(0.05)

        self.logger.warning(f"–ü–†–û–ü–£–°–¢–ò–¢–¨ –Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞ {timeout}—Å ({self.attempt_counter} –ø–æ–ø—ã—Ç–æ–∫)")
        return False

    def _ultra_fast_search(self) -> Optional[Tuple[int, int]]:
        """
        –°—É–ø–µ—Ä-–±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –ü–†–û–ü–£–°–¢–ò–¢–¨ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π.

        Returns:
            tuple: (x, y) –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ None
        """
        # –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        screenshot = self.adb.screenshot()
        if screenshot is None or screenshot.size == 0:
            return None

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if self.debug_mode and self.attempt_counter % 20 == 1:
            self._save_debug_image(screenshot, f"original_{self.attempt_counter}.png")

        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        coords = self._search_in_region_ultra_fast(screenshot, self.primary_region, "primary")
        if coords:
            return coords

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        coords = self._search_in_region_ultra_fast(screenshot, self.fallback_region, "fallback")
        return coords

    def _search_in_region_ultra_fast(self, screenshot: np.ndarray, region: Tuple[int, int, int, int],
                                    region_name: str) -> Optional[Tuple[int, int]]:
        """
        –°—É–ø–µ—Ä-–±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏.

        Args:
            screenshot: —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞
            region: –æ–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞ (x, y, w, h)
            region_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

        Returns:
            tuple: (x, y) –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–ª–∏ None
        """
        x, y, w, h = region

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
        x = max(0, x)
        y = max(0, y)
        w = min(screenshot.shape[1] - x, w)
        h = min(screenshot.shape[0] - y, h)

        if w <= 0 or h <= 0:
            return None

        # –í—ã—Ä–µ–∑–∞–µ–º –æ–±–ª–∞—Å—Ç—å
        roi = screenshot[y:y + h, x:x + w]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ROI –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if self.debug_mode and self.attempt_counter % 20 == 1:
            self._save_debug_image(roi, f"roi_{region_name}_{self.attempt_counter}.png")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –±—ã—Å—Ç—Ä—ã–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ç–µ–º–Ω–æ–º —Ñ–æ–Ω–µ - –∏–¥–µ–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π –¥–ª—è –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏–∏
        coords = self._method_inverted_threshold(roi)
        if coords:
            return (x + coords[0], y + coords[1])

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥
        coords = self._method_adaptive_threshold(roi)
        if coords:
            return (x + coords[0], y + coords[1])

        # –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å - –ø–æ–∏—Å–∫ –ø–æ —Ü–≤–µ—Ç—É
        coords = self._method_color_detection(roi)
        if coords:
            return (x + coords[0], y + coords[1])

        return None

    def _method_inverted_threshold(self, roi: np.ndarray) -> Optional[Tuple[int, int]]:
        """
        –ú–µ—Ç–æ–¥ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏–∏ - —Å–∞–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –¥–ª—è –±–µ–ª–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ç–µ–º–Ω–æ–º —Ñ–æ–Ω–µ.

        Args:
            roi: –æ–±–ª–∞—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–∞

        Returns:
            tuple: (x, y) –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–ª–∏ None
        """
        try:
            import pytesseract

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ
            gray = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)

            # –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è (–±–µ–ª—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–Ω—ã–º –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ)
            _, binary = cv2.threshold(gray, 120, 255, cv2.THRESH_BINARY_INV)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if self.debug_mode and self.attempt_counter % 20 == 1:
                self._save_debug_image(binary, f"binary_inv_{self.attempt_counter}.png")

            # –ë—ã—Å—Ç—Ä–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OCR
            config = '--psm 7 --oem 3'  # PSM 7 - –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç
            text = pytesseract.image_to_string(binary, lang='rus+eng', config=config).strip()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            if self._is_skip_text(text):
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–µ–Ω—Ç—Ä –æ–±–ª–∞—Å—Ç–∏
                return (roi.shape[1] // 2, roi.shape[0] // 2)

            return None

        except Exception as e:
            self.logger.debug(f"–û—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞: {e}")
            return None

    def _method_adaptive_threshold(self, roi: np.ndarray) -> Optional[Tuple[int, int]]:
        """
        –ú–µ—Ç–æ–¥ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏–∏.

        Args:
            roi: –æ–±–ª–∞—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–∞

        Returns:
            tuple: (x, y) –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–ª–∏ None
        """
        try:
            import pytesseract

            gray = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)

            # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è
            adaptive = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                                           cv2.THRESH_BINARY_INV, 11, 2)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if self.debug_mode and self.attempt_counter % 20 == 1:
                self._save_debug_image(adaptive, f"adaptive_{self.attempt_counter}.png")

            config = '--psm 7 --oem 3'
            text = pytesseract.image_to_string(adaptive, lang='rus+eng', config=config).strip()

            if self._is_skip_text(text):
                return (roi.shape[1] // 2, roi.shape[0] // 2)

            return None

        except Exception as e:
            self.logger.debug(f"–û—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞: {e}")
            return None

    def _method_color_detection(self, roi: np.ndarray) -> Optional[Tuple[int, int]]:
        """
        –ú–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –ø–æ —Ü–≤–µ—Ç—É - –≤—ã–¥–µ–ª—è–µ–º –±–µ–ª—ã–µ –ø–∏–∫—Å–µ–ª–∏ –Ω–∞ —Ç–µ–º–Ω–æ–º —Ñ–æ–Ω–µ.

        Args:
            roi: –æ–±–ª–∞—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–∞

        Returns:
            tuple: (x, y) –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–ª–∏ None
        """
        try:
            import pytesseract

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ HSV –¥–ª—è –ª—É—á—à–µ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è –±–µ–ª–æ–≥–æ —Ü–≤–µ—Ç–∞
            hsv = cv2.cvtColor(roi, cv2.COLOR_BGR2HSV)

            # –ú–∞—Å–∫–∞ –¥–ª—è –±–µ–ª–æ–≥–æ —Ü–≤–µ—Ç–∞
            lower_white = np.array([0, 0, 180])
            upper_white = np.array([255, 30, 255])
            white_mask = cv2.inRange(hsv, lower_white, upper_white)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if self.debug_mode and self.attempt_counter % 20 == 1:
                self._save_debug_image(white_mask, f"white_mask_{self.attempt_counter}.png")

            config = '--psm 7 --oem 3'
            text = pytesseract.image_to_string(white_mask, lang='rus+eng', config=config).strip()

            if self._is_skip_text(text):
                return (roi.shape[1] // 2, roi.shape[0] // 2)

            return None

        except Exception as e:
            self.logger.debug(f"–û—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ –ø–æ–∏—Å–∫–∞ –ø–æ —Ü–≤–µ—Ç—É: {e}")
            return None

    def _is_skip_text(self, text: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.

        Args:
            text: —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç

        Returns:
            bool: True –µ—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        """
        import re

        if not text:
            return False

        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        clean_text = re.sub(r'[^\w>¬ª]', '', text.upper())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        for variant in self.skip_variants:
            clean_variant = re.sub(r'[^\w>¬ª]', '', variant.upper())
            if clean_variant == clean_text:
                self.logger.debug(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: '{text}' -> '{variant}'")
                return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        if len(clean_text) >= 6:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è "–ü–†–û–ü–£–°–¢–ò–¢–¨"
            for variant in ["–ü–†–û–ü–£–°–¢–ò–¢–¨", "SKIP"]:
                if variant in clean_text:
                    self.logger.debug(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: '{text}' —Å–æ–¥–µ—Ä–∂–∏—Ç '{variant}'")
                    return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–µ–ª–∫–∏
        if '>>' in text or '¬ª' in text:
            self.logger.debug(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å—Ç—Ä–µ–ª–∫–∏: '{text}'")
            return True

        return False

    def _save_debug_image(self, image: np.ndarray, filename: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏."""
        if not self.debug_mode:
            return

        try:
            filepath = self.debug_dir / filename
            cv2.imwrite(str(filepath), image)
            self.logger.debug(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {filepath}")
        except Exception as e:
            self.logger.debug(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    def get_statistics(self) -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞.

        Returns:
            dict: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        avg_time = (self.total_search_time / self.successful_searches) if self.successful_searches > 0 else 0

        return {
            'total_attempts': self.attempt_counter,
            'successful_searches': self.successful_searches,
            'total_search_time': self.total_search_time,
            'average_search_time': avg_time,
            'success_rate': (self.successful_searches / max(1, self.attempt_counter)) * 100,
            'ocr_available': self.ocr_available,
            'debug_mode': self.debug_mode
        }

    def reset_statistics(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        self.attempt_counter = 0
        self.total_search_time = 0
        self.successful_searches = 0
        self.logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞")

    def enable_debug_mode(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏."""
        self.debug_mode = True
        if not self.debug_dir.exists():
            self.debug_dir.mkdir(exist_ok=True)
        self.logger.info("üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω")

    def disable_debug_mode(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏."""
        self.debug_mode = False
        self.logger.info("–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω")